func TestDestroyDatabase(t *testing.T) {
	setupTestEnv()
	defer teardownTestEnv()

	// Insert test data
	result, err := metaDB.Exec("INSERT INTO databases (name, description, workspace_id) VALUES (?, ?, ?)", "TestDB", "Test database", 1)
	if err != nil {
		t.Fatal(err)
	}
	id, _ := result.LastInsertId()

	router := mux.NewRouter()
	router.HandleFunc("/databases/{id}", destroyDatabase).Methods("DELETE")

	req, _ := http.NewRequest("DELETE", fmt.Sprintf("/databases/%d", id), nil)
	rr := httptest.NewRecorder()

	router.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusNoContent {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusNoContent)
	}

	// Verify database is deleted
	var count int
	err = metaDB.QueryRow("SELECT COUNT(*) FROM databases WHERE id = ?", id).Scan(&count)
	if err != nil {
		t.Fatal(err)
	}

	if count != 0 {
		t.Errorf("expected database to be deleted, but it still exists")
	}
}

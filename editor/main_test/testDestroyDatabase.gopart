func TestDestroyDatabase(t *testing.T) {
	setupTestEnvironment()
	defer cleanupTestEnvironment()

	// Create a test database
	result, err := metaDB.Exec("INSERT INTO databases (name, description, workspace_id) VALUES (?, ?, ?)",
		"TestDB", "Test database", 1)
	if err != nil {
		t.Fatal(err)
	}
	id, _ := result.LastInsertId()

	// Create the physical database file
	dbPath := filepath.Join(workspaceBasePath, "1", fmt.Sprintf("%d.sqlite", id))
	os.MkdirAll(filepath.Dir(dbPath), os.ModePerm)
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		t.Fatal(err)
	}
	db.Close()

	router := mux.NewRouter()
	router.HandleFunc("/databases/{id}", destroyDatabase).Methods("DELETE")

	req, _ := http.NewRequest("DELETE", fmt.Sprintf("/databases/%d", id), nil)
	rr := httptest.NewRecorder()

	router.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusNoContent {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusNoContent)
	}

	// Check if the database was removed from the meta database
	var count int
	err = metaDB.QueryRow("SELECT COUNT(*) FROM databases WHERE id = ?", id).Scan(&count)
	if err != nil {
		t.Fatal(err)
	}
	if count != 0 {
		t.Errorf("database was not removed from meta database")
	}

	// Check if the physical database file was removed
	if _, err := os.Stat(dbPath); !os.IsNotExist(err) {
		t.Errorf("database file was not removed at %s", dbPath)
	}
}

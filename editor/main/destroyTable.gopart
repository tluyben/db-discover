func destroyTable(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	var databaseID, workspaceID int
	var tableName string
	err := metaDB.QueryRow("SELECT database_id, name FROM tables WHERE id = ?", id).Scan(&databaseID, &tableName)
	if err != nil {
		log.Fatalf("destroyTable: Error querying database_id and table name: %v", err)
		return
	}

	err = metaDB.QueryRow("SELECT workspace_id FROM databases WHERE id = ?", databaseID).Scan(&workspaceID)
	if err != nil {
		log.Fatalf("destroyTable: Error querying workspace_id: %v", err)
		return
	}

	_, err = metaDB.Exec("DELETE FROM tables WHERE id = ?", id)
	if err != nil {
		log.Fatalf("destroyTable: Error deleting from tables: %v", err)
		return
	}

	// Drop table in physical SQLite database
	dbPath := filepath.Join(workspaceBasePath, fmt.Sprintf("%d", workspaceID), fmt.Sprintf("%d.sqlite", databaseID))
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		log.Fatalf("destroyTable: Error opening SQLite database: %v", err)
		return
	}
	defer db.Close()

	_, err = db.Exec(fmt.Sprintf("DROP TABLE IF EXISTS %s", tableName))
	if err != nil {
		log.Fatalf("destroyTable: Error dropping table: %v", err)
		return
	}

	w.WriteHeader(http.StatusNoContent)
}


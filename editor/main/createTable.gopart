func createTable(w http.ResponseWriter, r *http.Request) {
	var table Table
	json.NewDecoder(r.Body).Decode(&table)

	result, err := metaDB.Exec("INSERT INTO tables (name, database_id) VALUES (?, ?)",
		table.Name, table.DatabaseID)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	id, _ := result.LastInsertId()
	table.ID = int(id)

	// Create table in physical SQLite database
	var workspaceID int
	err = metaDB.QueryRow("SELECT workspace_id FROM databases WHERE id = ?", table.DatabaseID).Scan(&workspaceID)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	dbPath := filepath.Join(workspaceBasePath, fmt.Sprintf("%d", workspaceID), fmt.Sprintf("%d.sqlite", table.DatabaseID))
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer db.Close()

	_, err = db.Exec(fmt.Sprintf("CREATE TABLE %s (id INTEGER PRIMARY KEY AUTOINCREMENT)", table.Name))
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(table)
}

